{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n/**\r\n * Same as React.useState but `setState` accept `ignoreDestroy` param to not to setState after destroyed.\r\n * We do not make this auto is to avoid real memory leak.\r\n * Developer should confirm it's safe to ignore themselves.\r\n */\n\nexport default function useState(defaultValue) {\n  var destroyRef = React.useRef(false);\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  React.useEffect(function () {\n    return function () {\n      destroyRef.current = true;\n    };\n  }, []);\n\n  function safeSetState(updater, ignoreDestroy) {\n    if (ignoreDestroy && destroyRef.current) {\n      return;\n    }\n\n    setValue(updater);\n  }\n\n  return [value, safeSetState];\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/L5_M7_APD/MerryMeal/merry-meal-main/merry-meal-charity/client/node_modules/rc-util/es/hooks/useState.js"],"names":["_slicedToArray","React","useState","defaultValue","destroyRef","useRef","_React$useState","_React$useState2","value","setValue","useEffect","current","safeSetState","updater","ignoreDestroy"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,QAAT,CAAkBC,YAAlB,EAAgC;AAC7C,MAAIC,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAa,KAAb,CAAjB;;AAEA,MAAIC,eAAe,GAAGL,KAAK,CAACC,QAAN,CAAeC,YAAf,CAAtB;AAAA,MACII,gBAAgB,GAAGP,cAAc,CAACM,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIE,KAAK,GAAGD,gBAAgB,CAAC,CAAD,CAF5B;AAAA,MAGIE,QAAQ,GAAGF,gBAAgB,CAAC,CAAD,CAH/B;;AAKAN,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAY;AAC1B,WAAO,YAAY;AACjBN,MAAAA,UAAU,CAACO,OAAX,GAAqB,IAArB;AACD,KAFD;AAGD,GAJD,EAIG,EAJH;;AAMA,WAASC,YAAT,CAAsBC,OAAtB,EAA+BC,aAA/B,EAA8C;AAC5C,QAAIA,aAAa,IAAIV,UAAU,CAACO,OAAhC,EAAyC;AACvC;AACD;;AAEDF,IAAAA,QAAQ,CAACI,OAAD,CAAR;AACD;;AAED,SAAO,CAACL,KAAD,EAAQI,YAAR,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\r\nimport * as React from 'react';\r\n/**\r\n * Same as React.useState but `setState` accept `ignoreDestroy` param to not to setState after destroyed.\r\n * We do not make this auto is to avoid real memory leak.\r\n * Developer should confirm it's safe to ignore themselves.\r\n */\r\n\r\nexport default function useState(defaultValue) {\r\n  var destroyRef = React.useRef(false);\r\n\r\n  var _React$useState = React.useState(defaultValue),\r\n      _React$useState2 = _slicedToArray(_React$useState, 2),\r\n      value = _React$useState2[0],\r\n      setValue = _React$useState2[1];\r\n\r\n  React.useEffect(function () {\r\n    return function () {\r\n      destroyRef.current = true;\r\n    };\r\n  }, []);\r\n\r\n  function safeSetState(updater, ignoreDestroy) {\r\n    if (ignoreDestroy && destroyRef.current) {\r\n      return;\r\n    }\r\n\r\n    setValue(updater);\r\n  }\r\n\r\n  return [value, safeSetState];\r\n}"]},"metadata":{},"sourceType":"module"}